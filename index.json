[
{
	"uri": "https://rmrector.github.io/script.artwork.beef/usage/",
	"title": "Installation &amp; usage",
	"tags": [],
	"description": "",
	"content": "Installing Install my dev repository to get updates delivered to you automatically. After the repo is installed, Artwork Beef can be installed from \u0026ldquo;Program add-ons\u0026rdquo;. It can also be installed with this single zip file, but you will have to download each new version yourself. Do not install Artwork Beef from GitHub source unless you know you need to and have read the README.\nArtwork Helper can be installed with this single installable zip, but it\u0026rsquo;s only necessary if a skin depends on it.\nInclusion in the official Kodi repo isn\u0026rsquo;t likely for now, some of this functionality may make its way into Leia so it will probably see some feature churn before long.\nUsage Install it, and configure it to your liking. It is designed to run after library updates with the add-on settings \u0026ldquo;Automatically add artwork for new videos\u0026rdquo; and \u0026ldquo;Automatically add artwork for new music\u0026rdquo;.\nAutomatic processing Artwork Beef must process all items in your library, and will do so automatically the first time it runs. If configured as above, it will scan new media items as they are added to Kodi\u0026rsquo;s library, and over time (4-8 months) it will re-process existing media items still missing artwork, checking for new artwork from web services and the file system. If the option \u0026ldquo;only identify local files\u0026rdquo; is enabled it will check for new local artwork files monthly.\nManual processing You can also run it from Program add-ons to trigger the automatic process for new or all items, or items old enough to need an update; a currently running process can also be canceled here. Some other actions are available here. To operate on a single media item, open the context menu on that item, then under \u0026ldquo;Manage\u0026hellip;\u0026rdquo; there are options \u0026ldquo;AB: Add missing artwork\u0026rdquo; which processes the single item like the automatic process, checking for new local files and searching the web services for any missing art; and \u0026ldquo;AB: Select artwork\u0026hellip;\u0026rdquo; to manually select new artwork.\nEpisode fanart Episode fanart requires using a scraper that grabs the TheTVDB ID for each episode, like the standard TheTVDB scraper and The Movie Database TV show scraper, or an NFO manager that does the same. You must enable adding episode fanart manually for each series through the add-on settings, as they add a bundle of new API calls to The Movie Database and just aren\u0026rsquo;t available for many series.\nChange report It generates a report of changes to userdata/addon_data/script.artwork.beef/artwork-report.txt.\n"
},
{
	"uri": "https://rmrector.github.io/script.artwork.beef/otherdetails/",
	"title": "Problems and other questions",
	"tags": [],
	"description": "",
	"content": "What exactly does this do, why is it necessary? Artwork Beef\u0026rsquo;s main contributions to your Kodi setup is to add extended artwork to Kodi\u0026rsquo;s library and to download artwork from web services to the local file system. It is generally designed to work automatically much like scrapers.\nAdd extended artwork to Kodi\u0026rsquo;s library Kodi and scrapers have had some support for extended artwork for the video library for awhile, but they aren\u0026rsquo;t supported to the same extent as basic artwork, like \u0026ldquo;poster\u0026rdquo; and \u0026ldquo;fanart\u0026rdquo;, and need Artwork Beef or something like it to add extended artwork to Kodi\u0026rsquo;s library with JSON-RPC.\nKodi 17 Krypton and below only assigns basic artwork from scrapers, NFO files, and the local file system. More help is needed to get any extended artwork into the library, whether you already have them saved locally or want to \u0026ldquo;scrape\u0026rdquo; them from web services.\nKodi 18 Leia has added the ability to assign extended artwork from scrapers and NFO files. It is still early days for Kodi 18 however, and not all scrapers currently support extended artwork or they may not support the full selection.\nAdditionally for movie set artwork, Kodi just copies movie artwork, more help is needed to add meaningfully different artwork for them.\nDownload artwork locally Artwork Beef can download artwork locally to avoid troubles when web service URLs change, and avoid redownloading the same image for multiple Kodi installations or in the future if the image is no longer in Kodi\u0026rsquo;s texture cache.\nKodi 18 music library In Kodi 18 the music library now fully supports adding artwork from all sides. Kodi can be configured (with advancedsettings.xml) to identify and add any type of local artwork, and any type of artwork can be specified in NFO files or from scrapers, which Kodi will set automatically if they match the AS.xml configuration.\nFor the music library, Artwork Beef is still helpful to download full quality artwork locally and to add additional artwork from web services until scrapers are updated to add the full selection.\nArtwork Beef does not support music library artwork for Kodi 17 and below at all.\nHow do I quick-start this thing?  The quickest way to get started is to install it and configure it to your liking. If you want Artwork Beef to automatically add artwork for new media \u0026hellip;  Enable the setting \u0026ldquo;Add artwork for new videos after library updates\u0026rdquo; and / or \u0026ldquo;Add artwork for new music after library updates\u0026rdquo;.   If you want Artwork Beef to download image files to your local file system \u0026hellip;  Then add each image type to the settings \u0026ldquo;Download these artwork types to the local file system\u0026rdquo; for each media type at the bottom of the \u0026lsquo;TV shows\u0026rsquo;, \u0026lsquo;Movies\u0026rsquo;, \u0026lsquo;Music videos\u0026rsquo;, and \u0026lsquo;Music\u0026rsquo; tabs.   If you want Artwork Beef to only identify artwork you have already gathered locally with a media manager \u0026hellip;  Enable the setting \u0026ldquo;Do not automatically add artwork from web services, only identify local files\u0026rdquo; at the top of each media tab.   If you want Artwork Beef to ignore certain media types during automatic processing \u0026hellip;  Disable all options under \u0026ldquo;Automatically add these artwork types from web services and file system\u0026rdquo; and \u0026ldquo;Download these artwork types to the local file system\u0026rdquo; for that media type. For movies, episodes, and music videos, also disable the options \u0026ldquo;Replace episode / movie / music video \u0026lsquo;thumb\u0026rsquo; with Kodi generated thumb\u0026rdquo; on the Advanced tab.   See First usage for more details.  I installed Artwork Beef but all my media items are still missing artwork! Run Artwork Beef from \u0026ldquo;Program add-ons\u0026rdquo; and then \u0026ldquo;add missing artwork for \u0026hellip;\u0026rdquo; \u0026ldquo;new videos\u0026rdquo; or music. Artwork Beef must be run on media items before it can do anything. It can be configured to run automatically after library updates.\nI can\u0026rsquo;t see artwork while browsing the library, but I do see it assigned in \u0026ldquo;AB: select artwork\u0026hellip;\u0026rdquo; or Kodi\u0026rsquo;s built-in \u0026ldquo;Choose art\u0026rdquo; dialog. Artwork Beef has done its job. Skins are responsible for displaying artwork assigned in the Kodi library. Are you sure you have configured the skin to show the artwork type you expect for the media type you are looking at?\nWhy don\u0026rsquo;t I see new artwork I just submitted to a web service when manually selecting artwork?  It may take a day or two for new artwork to be available due to server caching. Artwork Beef caches the previous image results from web services for 72 hours. For fanart.tv, without a personal API key you results could be even older.  Artwork from web services are added to the library but are not visible in the GUI. Most likely the web service is temporarily/intermittently unavailable. Try again later. Configuring Artwork Beef to download artwork to your local file system is probably a good idea. Connection timeouts, HTTP 500 errors, and certificate errors are good indications of this.\nI receive an error message \u0026ldquo;Invalid project API key\u0026rdquo; for a particular web service. Could be one of three things, the error message will specify precisely which:\n Artwork Beef was not installed correctly. You have entered your own project API key improperly; remove that setting and try again. Or the built-in API keys have been disabled and you will have to sign up for a project key of your own (unlikely).  Manual selection of artwork doesn\u0026rsquo;t show any artwork from one or any web service. Does it happen for all media items of a particular type?\n If there is a message about \u0026ldquo;Invalid project API key\u0026rdquo; for a particular web service, see the section just above. Or maybe the web service is temporarily unavailable, or your Kodi device\u0026rsquo;s internet connection is broken. The Kodi debug log and Artwork Beef\u0026rsquo;s artwork report may have more details. Or if there is a message \u0026ldquo;No web service IDs available\u0026rdquo;, see next section. Otherwise post a reply on the forum thread with a description of the problem, a Kodi debug log, and the latest group of artwork-report.txt.  I received a message \u0026ldquo;No web service IDs available, can\u0026rsquo;t look up online\u0026rdquo;  Artwork Beef requires web service IDs (like an IMDB number) for all items in the Kodi library except movie sets and music videos. These should be included in NFO files, scrapers, or embedded tags.  If you use scrapers for the media item, make sure your scrapers are up to date and refresh the item. If you have NFO files, make sure there is a \u0026ldquo;uniqueid\u0026rdquo; element in it. An \u0026ldquo;imdbnumber\u0026rdquo; element should also work (for movies and TV shows), and an \u0026ldquo;id\u0026rdquo; element might work. If your NFOs don\u0026rsquo;t have these elements then upgrade your media manager and recreate the NFOs, then refresh the item in Kodi. Music must be tagged with MusicBrainz IDs. Use MusicBrainz Picard for tagging files.    Artwork Beef cannot find artwork for some movie sets / collections from fanart.tv. Artwork Beef must look up movie set artwork on fanart.tv by a TheMovieDB ID, which has different rules for what a movie collection is than you might. However, you can manually download that artwork and place it in the correct location on your file system, then run \u0026ldquo;AB: add missing artwork\u0026rdquo; on the affected movie set.\nA Kodi skin / web interface / remote is showing a thumbnail image instead of a movie poster. The skin / web interface / remote is pulling up the movie \u0026ldquo;thumb\u0026rdquo; and expecting the fallback poster, but it should instead pick the \u0026ldquo;poster\u0026rdquo; first and fall back to the thumb only if the poster doesn\u0026rsquo;t exist. They are two different images for two different purposes and should be chosen based on the interface design.\nWhere do I put my project API keys for other web services?  I do not suggest you do this, the option is only available in case the built-in project keys stop working. At the bottom of the Advanced tab of add-on settings.  Where is the option to replace the fanart slideshow from Artwork Downloader? No such option is available, Artwork Beef will not duplicate image files for this purpose. Skins have other options that don\u0026rsquo;t require duplicating files.\nTrouble with animated artwork See the Kodi wiki for current limitations of animated artwork.\nError messages about KyraDB API keys Artwork from KyraDB requires an API key and User key, which you can get by signing up for a free account.\n"
},
{
	"uri": "https://rmrector.github.io/script.artwork.beef/skins/",
	"title": "Skin support",
	"tags": [],
	"description": "",
	"content": "For the most part, skins will still access images in the same Kodi standard way. Episode and season fanart may just work, depending on how your skin accesses them when listing episodes or seasons. $INFO[ListItem.Art(fanart)] pulls the episode or season backdrop if it exists, otherwise, Kodi falls back to the series backdrop.\nExtrafanart has been integrated into the library and no longer has to be in the file system, but does require skins to access them differently. Extrathumbs can be similarly integrated. Skins can gather multiple fanart for random display with a fadelabel; see Fun without add-ons for an example.\nArtwork Helper is a small add-on that skins can depend on to more easily gather fanart/thumbs for a multiimage control. It can still have a noticeable delay compared to directly accessing other artwork with ListItem.Art(clearlogo) (especially on Windows), so skins that have a greater focus on fanart will probably prefer the plugin-free route.\nSkins should not list Artwork Beef as a dependency, nor depend on its installation for displaying artwork, as Artwork Beef isn\u0026rsquo;t the only one that can set these. Check for the existence of fanart1 to tell if the ListItem has these multiple fanart.\nThe music library just got a \u0026ldquo;Kodi standard way\u0026rdquo; in Kodi 18. Skins can access all artwork from the library just like they do from the video library. Prefixes for artwork like \u0026lsquo;artist.\u0026rsquo; and \u0026lsquo;album.\u0026rsquo; and \u0026lsquo;albumartist.\u0026rsquo; pull up parent artwork from songs in the same way \u0026lsquo;tvshow.\u0026rsquo; is used in the video library. \u0026lsquo;artist.\u0026rsquo; is also available for albums. discart for multiple disc albums are a bit hairier, as discs aren\u0026rsquo;t a separate media item in the Kodi library with their own place for artwork. Artwork Beef will add separate discart as discart1, discart2, and so on to the album; use a variable like below to pick the right one for a song ListItem.\n\u0026lt;variable name=\u0026#34;ListItemSongDiscart\u0026#34;\u0026gt; \u0026lt;value condition=\u0026#34;Integer.IsEqual(ListItem.DiscNumber,1) + !String.IsEmpty(ListItem.Art(album.discart1))\u0026#34;\u0026gt;$INFO[ListItem.Art(album.discart1)]\u0026lt;/value\u0026gt; \u0026lt;value condition=\u0026#34;Integer.IsEqual(ListItem.DiscNumber,2) + !String.IsEmpty(ListItem.Art(album.discart2))\u0026#34;\u0026gt;$INFO[ListItem.Art(album.discart2)]\u0026lt;/value\u0026gt; \u0026lt;value condition=\u0026#34;Integer.IsEqual(ListItem.DiscNumber,3) + !String.IsEmpty(ListItem.Art(album.discart3))\u0026#34;\u0026gt;$INFO[ListItem.Art(album.discart3)]\u0026lt;/value\u0026gt; \u0026lt;value condition=\u0026#34;Integer.IsEqual(ListItem.DiscNumber,4) + !String.IsEmpty(ListItem.Art(album.discart4))\u0026#34;\u0026gt;$INFO[ListItem.Art(album.discart4)]\u0026lt;/value\u0026gt; \u0026lt;value condition=\u0026#34;Integer.IsEqual(ListItem.DiscNumber,6) + !String.IsEmpty(ListItem.Art(album.discart6))\u0026#34;\u0026gt;$INFO[ListItem.Art(album.discart6)]\u0026lt;/value\u0026gt; \u0026lt;value condition=\u0026#34;Integer.IsEqual(ListItem.DiscNumber,7) + !String.IsEmpty(ListItem.Art(album.discart7))\u0026#34;\u0026gt;$INFO[ListItem.Art(album.discart7)]\u0026lt;/value\u0026gt; \u0026lt;value condition=\u0026#34;Integer.IsEqual(ListItem.DiscNumber,8) + !String.IsEmpty(ListItem.Art(album.discart8))\u0026#34;\u0026gt;$INFO[ListItem.Art(album.discart8)]\u0026lt;/value\u0026gt; \u0026lt;value condition=\u0026#34;Integer.IsEqual(ListItem.DiscNumber,9) + !String.IsEmpty(ListItem.Art(album.discart9))\u0026#34;\u0026gt;$INFO[ListItem.Art(album.discart9)]\u0026lt;/value\u0026gt; \u0026lt;value\u0026gt;$INFO[ListItem.Art(album.discart)]\u0026lt;/value\u0026gt; \u0026lt;/variable\u0026gt; "
},
{
	"uri": "https://rmrector.github.io/script.artwork.beef/examples/",
	"title": "Examples",
	"tags": [],
	"description": "",
	"content": "Episode fanart Early look at episode fanart from Copacetic skin.\nCharacterart And multiple characterart "
},
{
	"uri": "https://rmrector.github.io/script.artwork.beef/usage/firstusage/",
	"title": "First usage",
	"tags": [],
	"description": "",
	"content": " Artwork Beef must process all items in your library, and will do so automatically. There are some artwork in the file system that isn\u0026rsquo;t added to Kodi\u0026rsquo;s database with any/many other tools. It will also check web services for new artwork to fill out any media items still missing some, unless \u0026ldquo;Do not automatically add artwork from web services, only identify local files\u0026rdquo; is enabled. If you haven\u0026rsquo;t been managing movie collection artwork, Kodi sets posters and fanart to those of one of the movies in the collection. You may want to run Artwork Beef from Program Add-ons and remove all existing artwork from movie collections before running Artwork Beef\u0026rsquo;s full process. If you manage all of your artwork with image files and/or NFO files, the add-on settings for each media group \u0026ldquo;Do not automatically add artwork from web services, only identify local files\u0026rdquo; will prevent the add-on from querying the web services during automatic processing, saving time and network resources.  You may also want to disable \u0026ldquo;Update artwork for old items daily\u0026rdquo; if you don\u0026rsquo;t frequently add new artwork for existing items in the library.   The options \u0026ldquo;Preload local \u0026hellip; artwork to texture cache\u0026rdquo; will preload processed item artwork to Kodi\u0026rsquo;s texture cache to speed up initial browsing. It only works on artwork saved locally. For art types with multiple multiple images, the options \u0026ldquo;Prefer artwork from specific web service\u0026rdquo; will prevent Beef from adding artwork from other web services if any are found at the specified web service, avoiding some duplicate images. To disable all automatic processing for a specific media type, disable all art type options for that media type in the \u0026ldquo;Automatically add \u0026hellip;\u0026rdquo; section. If you have multiple Kodi devices sharing a MySQL database, only enable the automatic processing on one of them. For multiple Kodi devices with their own databases and you want Artwork Beef to download image files to be shared across them, enable \u0026ldquo;Automatically add artwork from file system only\u0026rdquo; on all but the master Kodi device. If you are using the Universal Movie Scraper, configure it to use TheMovieDB for search to add the TMDB ID which improves movie matching on fanart.tv. If you are using a media manager, configure it to add a \u0026lsquo;tmdb\u0026rsquo; unique ID to movie NFOs.  Okay, so these are more interesting just after the first run:\n Grabbing movie collection artwork from web services may not work automatically if the collection name in Kodi doesn\u0026rsquo;t exactly match the collection name on TheMovieDB. After your collections are processed for the first time, run Artwork Beef from Program Add-ons and select \u0026ldquo;identify unmatched sets with TMDb\u0026rdquo; to show a list of all still-unmatched movies collections, then select one and enter the name of the collection exactly as it is on TheMovieDB. If a collection was matched incorrectly, navigate to the collection in the video library and choose \u0026ldquo;Select artwork\u0026hellip;\u0026rdquo; from the \u0026ldquo;Manage\u0026rdquo; menu of the context menu, then choose \u0026ldquo;Search for item\u0026rdquo;. Ditto music video artwork, but when entering the name use Artist Name - Track Name to search on TheAudioDB.  "
},
{
	"uri": "https://rmrector.github.io/script.artwork.beef/skins/addonfreefun/",
	"title": "Fun without add-ons",
	"tags": [],
	"description": "",
	"content": "Because who wants another dependency?\nDisplay multiple fanart Artwork Helper isn\u0026rsquo;t strictly needed, how about that? It is a bit more work though.\nThe trick is to use a fadelabel control to gather multiple InfoLabels and randomize them, then use that control\u0026rsquo;s label as the final image to be displayed.\n\u0026lt;control type=\u0026#34;fadelabel\u0026#34; id=\u0026#34;398045\u0026#34;\u0026gt; \u0026lt;description\u0026gt;Randomizer for plugin-free multiple fanart\u0026lt;/description\u0026gt; \u0026lt;top\u0026gt;-1000\u0026lt;/top\u0026gt; \u0026lt;!-- Don\u0026#39;t need to see it, but can\u0026#39;t change its visibility. Put it off screen --\u0026gt; \u0026lt;width\u0026gt;1\u0026lt;/width\u0026gt; \u0026lt;height\u0026gt;1\u0026lt;/height\u0026gt; \u0026lt;info\u0026gt;ListItem.Art(fanart)\u0026lt;/info\u0026gt; \u0026lt;info\u0026gt;ListItem.Art(fanart1)\u0026lt;/info\u0026gt; \u0026lt;info\u0026gt;ListItem.Art(fanart2)\u0026lt;/info\u0026gt; \u0026lt;!-- ... repeat for each numbered fanart --\u0026gt; \u0026lt;info\u0026gt;ListItem.Art(fanart9)\u0026lt;/info\u0026gt; \u0026lt;!-- tvshow.fanart are filled with the series fanart when navigating season and episode lists --\u0026gt; \u0026lt;info\u0026gt;ListItem.Art(tvshow.fanart)\u0026lt;/info\u0026gt; \u0026lt;info\u0026gt;ListItem.Art(tvshow.fanart1)\u0026lt;/info\u0026gt; \u0026lt;info\u0026gt;ListItem.Art(tvshow.fanart2)\u0026lt;/info\u0026gt; \u0026lt;!-- ... repeat for each numbered fanart --\u0026gt; \u0026lt;info\u0026gt;ListItem.Art(tvshow.fanart9)\u0026lt;/info\u0026gt; \u0026lt;!-- Container.ListItem.Art() are filled based on the focused ListItem in the **focused container** in Leia --\u0026gt; \u0026lt;info\u0026gt;Container.ListItem.Art(fanart)\u0026lt;/info\u0026gt; \u0026lt;info\u0026gt;Container.ListItem.Art(fanart1)\u0026lt;/info\u0026gt; \u0026lt;info\u0026gt;Container.ListItem.Art(fanart2)\u0026lt;/info\u0026gt; \u0026lt;info\u0026gt;Container.ListItem.Art(tvshow.fanart)\u0026lt;/info\u0026gt; \u0026lt;info\u0026gt;Container.ListItem.Art(tvshow.fanart1)\u0026lt;/info\u0026gt; \u0026lt;info\u0026gt;Container.ListItem.Art(tvshow.fanart2)\u0026lt;/info\u0026gt; \u0026lt;randomize\u0026gt;true\u0026lt;/randomize\u0026gt; \u0026lt;pauseatend\u0026gt;30000\u0026lt;/pauseatend\u0026gt; \u0026lt;!-- Time to show each image, in milliseconds --\u0026gt; \u0026lt;!-- No scrolling so only the pauseatend above (plus a short fade-in) affects length of time each image is shown --\u0026gt; \u0026lt;scroll\u0026gt;false\u0026lt;/scroll\u0026gt; \u0026lt;scrollout\u0026gt;false\u0026lt;/scrollout\u0026gt; \u0026lt;!-- Resets the timer when navigating to a new item, so each item\u0026#39;s first visible fanart will show for the full amount of time --\u0026gt; \u0026lt;resetonlabelchange\u0026gt;true\u0026lt;/resetonlabelchange\u0026gt; \u0026lt;/control\u0026gt; With that on your window, the InfoLabel $INFO[Control.GetLabel(398045)] will contain the URL/path to a single image that can be given to an image or multiimage path, and it will randomly rotate through every available image. It will skip any that are empty, so no blank spaces will be left.\nYou can make another structure with Player.Art for music visualization or a fullscreen now-playing window.\nGrab random fanart (plus any other info) from items in any library path Stick this little invisible list on your window somewhere:\n\u0026lt;control type=\u0026#34;list\u0026#34; id=\u0026#34;12341\u0026#34;\u0026gt; \u0026lt;content sortby=\u0026#34;random\u0026#34;\u0026gt;videodb://movies/titles/\u0026lt;/content\u0026gt; \u0026lt;autoscroll time=\u0026#34;30000\u0026#34;\u0026gt;true\u0026lt;/autoscroll\u0026gt; \u0026lt;!-- Time to show each image, in milliseconds --\u0026gt; \u0026lt;itemlayout /\u0026gt; \u0026lt;focusedlayout /\u0026gt; \u0026lt;/control\u0026gt; The path in the \u0026lt;content\u0026gt; element can be any path that Kodi supports, including any videodb paths in the library, playlists, and plugins, as long as it directly contains items with fanart.\nThen $INFO[Container(12341).ListItem.Art(fanart)] will contain the URL/path to a single image that can be given to an image or multiimage path, and it will randomly rotate through every item in the list. Use any other ListItem InfoLabels as you need them.\nOn MyVideoNav, when navigating categories like genres, studios, and years, this can pull fanart from items in just the focused category item by using $INFO[ListItem.FolderPath] for the \u0026lt;content\u0026gt; element. Big lists can take some time to fill when a new item is focused, so try a limit=\u0026quot;20\u0026quot; attribute to the content element.\nThis can be combined with \u0026ldquo;Display multiple fanart\u0026rdquo; above to pick from all fanart set for all items in the list. Set the fadelabel timer to be longer than this list to still display just one image from each item, or shorter to flip through more than one fanart for each item.\nNOTE: This works best with lists of items that mostly all have fanart, which may be a deal-breaker depending on your design, so keep it in mind when choosing this add-on free route.\nInteresting path options  All movies - videodb://movies/titles/ All TV shows - videodb://tvshows/titles/ All album artists - musicdb://artists/?albumartistsonly=true Skin playlists - special://skin/playlists/random_albums.xsp User playlists - special://profile/playlists/video/latest_episodes.xsp Custom video nodes to separate concerts/children\u0026rsquo;s shows/sports games/etc  library://video/movies/concerts.xml/ library://video/movies/notconcerts.xml/ library://video/tvshows/children.xml/ library://video/tvshows/notchildren.xml/   playlists can be used for similar purposes    Combining multiple paths One limitation of this vs an add-on is that there is no global library list that includes every media item in the library. Kodi 18 Leia adds a new feature that may convincingly accomplish something similar. Multiple content elements can be provided, so replace the single \u0026lt;content\u0026gt; above with something like below:\n\u0026lt;content sortby=\u0026#34;random\u0026#34; limit=\u0026#34;5\u0026#34;\u0026gt;videodb://movies/titles/\u0026lt;/content\u0026gt; \u0026lt;content sortby=\u0026#34;random\u0026#34; limit=\u0026#34;5\u0026#34;\u0026gt;videodb://musicvideos/titles/\u0026lt;/content\u0026gt; \u0026lt;content sortby=\u0026#34;random\u0026#34; limit=\u0026#34;5\u0026#34;\u0026gt;videodb://tvshows/titles/\u0026lt;/content\u0026gt; \u0026lt;content sortby=\u0026#34;random\u0026#34; limit=\u0026#34;5\u0026#34;\u0026gt;videodb://movies/sets/\u0026lt;/content\u0026gt; \u0026lt;content sortby=\u0026#34;random\u0026#34; limit=\u0026#34;5\u0026#34;\u0026gt;musicdb://artists/\u0026lt;/content\u0026gt; \u0026lt;content sortby=\u0026#34;random\u0026#34; limit=\u0026#34;5\u0026#34;\u0026gt;videodb://movies/titles/\u0026lt;/content\u0026gt; \u0026lt;content sortby=\u0026#34;random\u0026#34; limit=\u0026#34;5\u0026#34;\u0026gt;videodb://musicvideos/titles/\u0026lt;/content\u0026gt; \u0026lt;content sortby=\u0026#34;random\u0026#34; limit=\u0026#34;5\u0026#34;\u0026gt;videodb://movies/sets/\u0026lt;/content\u0026gt; \u0026lt;content sortby=\u0026#34;random\u0026#34; limit=\u0026#34;5\u0026#34;\u0026gt;videodb://tvshows/titles/\u0026lt;/content\u0026gt; \u0026lt;content sortby=\u0026#34;random\u0026#34; limit=\u0026#34;5\u0026#34;\u0026gt;musicdb://artists/\u0026lt;/content\u0026gt; The limit is low to avoid grouping too many of the same item together (\u0026ldquo;That\u0026rsquo;s not very random!\u0026quot;), and then repeat the available paths at least once to add back a bit of variety.\nDoes an episode or season have its own fanart? If ListItem.Art(fanart) is the same image as ListItem.Art(tvshow.fanart) then it is a fallback image and the episode doesn\u0026rsquo;t have its own. A variable value like below will show the single fanart image alone, because an episode with its own fanart is fancy.\n\u0026lt;value condition=\u0026#34;[Container.Content(episodes) | Container.Content(seasons)] + !String.IsEqual(ListItem.Art(tvshow.fanart), ListItem.Art(fanart))\u0026#34;\u0026gt;$INFO[ListItem.Art(fanart)]\u0026lt;/value\u0026gt; "
},
{
	"uri": "https://rmrector.github.io/script.artwork.beef/skins/artworkhelper/",
	"title": "Artwork helper",
	"tags": [],
	"description": "",
	"content": "Artwork Helper provides skins with a few options for building a list of images for a multiimage or list control from images available via InfoLabels. This is a small add-on that skins can use as a dependency, only doing what a skin asks it to do.\nCurrent version only works for Kodi 17 and 18, use version 0.7.1 for 15 and 16.\nAdd-on setting There is an add-on setting to pull extrafanart and extrathumbs from the filesystem, if there is only a single image in the library. It is off by default, but can be turned on by the end user/viewer. This setting is not needed if Artwork Beef is used to manage artwork. It can be found by navigating to Kodi settings -\u0026gt; System settings -\u0026gt; Add-ons -\u0026gt; Manage dependencies -\u0026gt; Artwork Helper. The Settings level may need to be set to Advanced to see dependencies in \u0026ldquo;Add-ons\u0026rdquo;.\nPaths built from InfoLabels These paths use InfoLabels to gather image URLs just like skins do.\nListItem multi image plugin path The simplest form grabs multiple images for the currently focused ListItem.\nplugin://script.artwork.helper/multiimage/listitem/?refresh=$INFO[ListItem.Label]\nMostly for fanart (fanart#), but works for any art type that has one or more images. Additional query params are available to modify its behavior, separate them with \u0026amp;amp;\u0026amp;amp;.\n refresh is required to get Kodi to fire off the plugin when the focused item changes. Set it to something that will change when the fanart should change, like ListItem.Label containerid points to the current ListItem in a specific container; either leave blank for the currently selected container on the Kodi 18 home window, or set to the desired container\u0026rsquo;s skin ID arttype lets you select different artwork. Defaults to \u0026lsquo;fanart\u0026rsquo;. allartists includes artwork for all artists of the item, including \u0026lsquo;artist\u0026rsquo; and \u0026lsquo;albumartist\u0026rsquo; plus \u0026lsquo;artist1\u0026rsquo;, \u0026lsquo;albumartist1\u0026rsquo; for duets or more. For the music library in Kodi 18 and up. Only takes effect when arttype is \u0026ldquo;artist.[arttype]\u0026rdquo; or \u0026ldquo;albumartist.[arttype]\u0026quot;.  With the full complement of options:\nplugin://script.artwork.helper/multiimage/listitem/?refresh=$INFO[Container.ListItem.Label]\u0026amp;amp;\u0026amp;amp;containerid=\u0026amp;amp;\u0026amp;amp;arttype=artist.fanart\u0026amp;amp;\u0026amp;amp;allartists=true\nContainer multi image plugin path This grabs multiple images for the current skin Container.\nplugin://script.artwork.helper/multiimage/container/?refresh=$INFO[Container.FolderName]\nAdditional query params are available to modify its behavior, separate them with \u0026amp;amp;\u0026amp;amp;.\n refresh is required to get Kodi to fire off the plugin when the focused item changes. Set it to something that will change when the fanart should change, like Container.FolderName arttype lets you select different artwork. Defaults to \u0026lsquo;tvshow.fanart\u0026rsquo;. allartists includes artwork for all artists. Only takes effect when arttype is \u0026ldquo;artist.[arttype]\u0026rdquo; or \u0026ldquo;albumartist.[arttype]\u0026quot;.  With some options:\nplugin://script.artwork.helper/multiimage/container/?refresh=$INFO[ListItem.Label]\u0026amp;amp;\u0026amp;amp;arttype=set.fanart\nPlayer multi image plugin path This grabs multiple images for the currently playing media.\nplugin://script.artwork.helper/multiimage/player/?refresh=$INFO[Player.Title]\nAdditional query params are available to modify its behavior, separate them with \u0026amp;amp;\u0026amp;amp;.\n refresh is required to get Kodi to fire off the plugin when the focused item changes. Set it to something that will change when the fanart should change, like Player.Title arttype lets you select different artwork. Defaults to \u0026lsquo;artist.fanart\u0026rsquo;. allartists includes artwork for all artists. Defaults to \u0026lsquo;true\u0026rsquo; when arttype is \u0026ldquo;artist.[arttype]\u0026rdquo; or \u0026ldquo;albumartist.[arttype]\u0026quot;, no effect otherwise.  With the full complement of options:\nplugin://script.artwork.helper/multiimage/player/?refresh=$INFO[Player.Title]\u0026amp;amp;\u0026amp;amp;arttype=artist.fanart\u0026amp;amp;\u0026amp;amp;allartists=false\nSmart series multi image plugin path This grabs multiple images for the current series, keeping the path the same through series-season-episode lists so that the fanart display stays smooth (only on the video library window). plugin://script.artwork.helper/multiimage/smartseries/?title=$INFO[ListItem.Title]\nAdditional query params are available to modify its behavior, separate them with \u0026amp;amp;\u0026amp;amp;.\n title is required to get Kodi to fire off the plugin when the focused item changes, like \u0026lsquo;refresh\u0026rsquo; in ListItem/Container paths. Set it to ListItem.Title if Container.Content is tvshows and Container.TVShowTitle if seasons/episodes. arttype lets you select different artwork. Defaults to \u0026lsquo;fanart\u0026rsquo;. Use only the base art type like \u0026lsquo;fanart\u0026rsquo;, the plugin will decide if tvshow.* is needed.  With the full complement of options:\nplugin://script.artwork.helper/multiimage/smartseries/?title=$INFO[ListItem.Title]\u0026amp;amp;\u0026amp;amp;arttype=fanart\nplugin://script.artwork.helper/multiimage/smartseries/?title=$INFO[Container.TVShowTitle]\u0026amp;amp;\u0026amp;amp;arttype=fanart\nArbitrary images plugin path This format lets you stitch any images together into a list by specifying their paths.\nplugin://script.artwork.helper/multiimage/?image=\u0026lt;image_path\u0026gt;\u0026amp;amp;\u0026amp;amp;image=\u0026lt;image_path\u0026gt;\u0026amp;amp;\u0026amp;amp;image=\u0026lt;image_path\u0026gt;\u0026amp;amp;\u0026amp;amp;image=\u0026lt;image_path\u0026gt;\u0026amp;amp;\u0026amp;amp;image=\u0026lt;image_path\u0026gt;\u0026amp;amp;\u0026amp;amp;image=\u0026lt;image_path\u0026gt;\nWhen the ListItem options above doesn\u0026rsquo;t work for you, this is your very wordy friend. Repeat the image block for as many images as you like, and it will ignore empty ones. The double ampersand \u0026amp;amp;\u0026amp;amp; separator between images is required.\nThis path doesn\u0026rsquo;t read any InfoLabels like the others, just returning the images you gave it into a format that multiimage or list controls can use. You can of course pass in the image paths from the InfoLabels yourself.\n"
},
{
	"uri": "https://rmrector.github.io/script.artwork.beef/usage/fromfiles/",
	"title": "Image files",
	"tags": [],
	"description": "",
	"content": "Downloading and managing local artwork files By default, Artwork Beef only identifies local artwork files, it does not add or modify them. There are some options to change that, though. With the settings \u0026ldquo;Download artwork to local files\u0026rdquo; you can configure exactly which types of artwork to download for each media type. If configured to download artwork, most video library images will be saved next to the media files with the most specific file names detailed below, with options to save movie and music video artwork without the base file name if you like, and options to save movie and music video fanart# to an \u0026ldquo;extrafanart\u0026rdquo; directory for skins using the classic style.\n The add-on setting \u0026ldquo;Delete deselected artwork files\u0026rdquo; will delete existing \u0026ldquo;fanart\u0026rdquo; files that are deselected manually in the GUI, to prevent that artwork file from being added back to the library when the media item is next processed. The add-on setting \u0026ldquo;Recycle deleted and replaced files to temp/cache directory\u0026rdquo; will move deleted and replaced artwork to Kodi\u0026rsquo;s temp or cache directory. This is fairly simple and does not check the available space on the drive, and can overwrite the first recycled file if the same art type is modified again.  Artwork file naming conventions for the video library Artwork Beef will pick up artwork files next to your video files if they match the configured art types in add-on settings. It has two conventions for loading most artwork: [media base file name]-[art type].[ext] for movies, episodes, and music videos, and [art type].[ext] for TV shows and as a less specific alternative for movies and music videos within their own directories. This generally matches Kodi\u0026rsquo;s file naming conventions.\n[art type] must be alphanumeric and lowercase, but can otherwise be freely named. They should exactly match the name that skins can use to access them, and extra fanart are saved as fanart1, fanart2, and so on; the same goes for any other art type you want to save more than one of, though it requires a skin to actually support multiple in some way.\nMovies, episodes, and music videos Artwork for //MRHOOD/Movies/Movie Name (2017)/Base File Name.mkv can generally be stored at //MRHOOD/Movies/Movie Name (2017)/Base File Name-[art type].[ext]. Episode artwork is stored similarly, the important part is that it\u0026rsquo;s in the same directory and has the same base file name as the episode video.\nA few specific examples are\n ... /Movie Name (2017)/Movie File Name-poster.jpg ... /Movie Name (2017)/Movie File Name-fanart.jpg ... /Movie Name (2017)/Movie File Name-fanart1.jpg ... /Movie Name (2017)/Movie File Name-fanart2.jpg ... /Movie Name (2017)/Movie File Name-fanart3.jpg ... /Movie Name (2017)/Movie File Name-clearlogo.png  If your movie or music video library is large, I suggest you keep each item in their own directory for performance reasons. Artwork Beef doesn\u0026rsquo;t work any differently if you keep them all in one directory, but its processing will slow down just like Kodi\u0026rsquo;s library update the more files that are packed together.\nTV shows and alternative for movies and music videos TV shows have a directory associated with them rather than an individual file, so there is no base file name to use. Artwork for //MRHOOD/TVShows/TV Show 1/ can generally be stored at //MRHOOD/TVShows/TV Show 1/[art type].[ext]. Movies and music videos stored in separate directories can also use this style, though if both styles exist for one movie it will choose the other, more specific, one \u0026ndash; handy for 3D or special editions that have their own artwork, if you keep them in the same directory.\nA few specific examples\n ... /TV Show 1/poster.jpg ... /TV Show 1/fanart.jpg ... /TV Show 1/fanart1.jpg ... /TV Show 1/fanart2.jpg ... /TV Show 1/fanart3.jpg ... /TV Show 1/clearlogo.png ... /TV Show 1/season-specials-poster.png ... /TV Show 1/season-specials-landscape.png ... /TV Show 1/season01-poster.png ... /TV Show 1/season01-landscape.png  Movie collection artwork Movie collection artwork can be pulled from a central directory (configured in the add-on settings) containing artwork named in a similar fashion to both options above. Movie collections may not have a folder they can call their own, so instead use the set\u0026rsquo;s name as the directory name.\nA few specific examples are\n ... /[central movie set info directory]/Movie Collection Name/poster.jpg ... /[central movie set info directory]/Movie Collection Name/fanart.jpg ... /[central movie set info directory]/Movie Collection Name/fanart1.jpg ... /[central movie set info directory]/Movie Collection Name/clearlogo.png  or\n ... /[central movie set info directory]/Movie Collection Name-poster.jpg ... /[central movie set info directory]/Movie Collection Name-fanart.jpg ... /[central movie set info directory]/Movie Collection Name-fanart1.jpg ... /[central movie set info directory]/Movie Collection Name-clearlogo.png  Artwork Beef can also be configured to pull collection artwork from a parent directory of movies, if that directory name exactly matches the cleaned collection name, with artwork named [art type].[ext].\nMusic artwork Music artwork is gathered from and downloaded to the \u0026ldquo;Artist information folder\u0026rdquo; setting in Kodi, added in 18 Leia under \u0026ldquo;Media settings\u0026rdquo;, \u0026ldquo;Music\u0026rdquo;, \u0026ldquo;Library\u0026rdquo;. The results are structured as\n ... /[Artist information folder]/[artist name]/thumb.jpg ... /[Artist information folder]/[artist name]/fanart.jpg ... /[Artist information folder]/[artist name]/fanart1.jpg ... /[Artist information folder]/[artist name]/clearlogo.png for artist artwork ... /[Artist information folder]/[artist name]/[album name]/thumb.jpg ... /[Artist information folder]/[artist name]/[album name]/back.jpg ... /[Artist information folder]/[artist name]/[album name]/spine.jpg ... /[Artist information folder]/[artist name]/[album name]/discart.png for album artwork ... /[Artist information folder]/[artist name]/[album name]/[song name]-thumb.jpg for song artwork  When there is more than one artist with the same name, the first four characters of the artist MusicBrainz ID is add to the end of the folder like [artist name]_12fe. Same goes when there is more than one album with the same name for a single artist (like remasters or other recordings), with the album / release MusicBrainz ID (not release group).\nFor albums with multiple discs, you can add disc artwork as \u0026lsquo;discart1.png\u0026rsquo; for disc 1, \u0026lsquo;discart2.png\u0026rsquo; for disc 2, and so on. Multiple disc albums can also have their songs and discart stored in disc specific subfolders, but other artwork can stay in the top album folder.\nArtwork Beef will also identify album and song artwork next to the song files if all songs for one album are in a single folder, and don\u0026rsquo;t share that folder with songs from any other album. Song artwork organized this way must match the base name of the song file, rather than just the song name as when in the artist folder. There is also an option to save album and song artwork to this directory if possible.\nNote: Albums nested inside of artist folders in the central directory may not be the best idea for the future, but that\u0026rsquo;s what Artwork Beef does for now.\nCentral directory folder naming When artwork is in the central directory (for music and movie sets), the folder name must exactly match the name in the library, including look-alike characters such as hyphen and hyphen-minus.\nFile system safe names For music and movie set artwork, the file name is made from the title or name of items, which may not be safe for the file system with characters like :?\u0026quot;/\\\u0026lt;\u0026gt;*|. Replace these characters with an underscore \u0026lsquo;_', and remove spaces and periods from the end to match Kodi\u0026rsquo;s file name cleaning. Artwork Beef will be more lenient in its matching to catch other styles.\nLegacy file names Artwork Beef will also identify several other filenames that are / have been used by other tools, such as Artwork Downloader and Movie Set Artwork Automator, in cases when they are different than the art type name skins use to access them.\nlogo.png is added as clearlogo, character.png is added as characterart, folder.jpg to thumb, disc.png and cdart.png to discart, files in the extrafanart directory are added as fanart#, and files in the extrathumbs directory are added as thumb#.\nAn option to rename artwork files If you have a Linux computer with Perl installed, here is a collection of commands to rename some artwork files from Artwork Downloader to Kodi file names. Moving extrafanart and extrathumbs is a bit more work. Only do this if all of your media management tools support the new names, Artwork Beef will support both for some time yet. These commands are just \u0026ldquo;dry runs\u0026rdquo; that will print out what the rename would do, remove the -n option from each line to actually rename the files.\n# For movies and TV shows find /path/to/media/ \\( -iname \u0026#34;logo.png\u0026#34; -o -iname \u0026#34;*-logo.png\u0026#34; \\) -exec rename -n \u0026#39;s/logo.png$/clearlogo.png/i\u0026#39; \u0026#39;{}\u0026#39; \\; find /path/to/media/ \\( -iname \u0026#34;disc.png\u0026#34; -o -iname \u0026#34;*-disc.png\u0026#34; \\) -exec rename -n \u0026#39;s/disc.png$/discart.png/i\u0026#39; \u0026#39;{}\u0026#39; \\; find /path/to/media/ \\( -iname \u0026#34;character.png\u0026#34; -o -iname \u0026#34;*-character.png\u0026#34; \\) -exec rename -n \u0026#39;s/character.png$/characterart.png/i\u0026#39; \u0026#39;{}\u0026#39; \\; # Music videos and the music library find /path/to/media/ \\( -iname \u0026#34;cdart.png\u0026#34; -o -iname \u0026#34;*-cdart.png\u0026#34; \\) -exec rename -n \u0026#39;s/cdart.png$/discart.png/i\u0026#39; \u0026#39;{}\u0026#39; \\; "
},
{
	"uri": "https://rmrector.github.io/script.artwork.beef/usage/settings/",
	"title": "Add-on settings &amp; actions",
	"tags": [],
	"description": "",
	"content": "Artwork Beef configuration and manual actions when run from \u0026ldquo;Program Add-ons\u0026rdquo;.\nGeneral \u0026ldquo;Add artwork for new videos / music after library updates\u0026rdquo; The main process of Artwork Beef. Runs after library updates to add extended artwork for media items newly added to the Kodi library, either from the file system or web services. Video and music are configured separately. A media item is only \u0026ldquo;new\u0026rdquo; once, after it has been scanned it is no longer \u0026ldquo;new\u0026rdquo;.\n\u0026ldquo;Update artwork for old items daily\u0026rdquo; Check old items for new artwork. \u0026ldquo;Old\u0026rdquo; in this case refers to media items that have been in the library for a while already. 4 months for newly released media that is still missing a bit of artwork, 8 months otherwise. If the options \u0026ldquo;only identify local files\u0026rdquo; is enabled then local files are checked monthly.\n\u0026ldquo;Delete deselected artwork files\u0026rdquo; Manually deselecting artwork like fanart will delete the original file. Otherwise the image will stay in the file system and Artwork Beef will add it back to the library the next time this item is scanned.\n\u0026ldquo;Recycle deleted and replaced artwork files to temp/cache directory\u0026rdquo; Recycled artwork goes to Kodi\u0026rsquo;s local temp or cache directory.\n\u0026ldquo;Disable/Enable Artwork Beef context items (per skin)\u0026rdquo; Hide the two standard context items \u0026ldquo;AB: Add missing artwork\u0026rdquo; and \u0026ldquo;AB: Select artwork \u0026hellip;\u0026rdquo; under the \u0026ldquo;Manage\u0026rdquo; menu of the context menu of most media items.\nSorting and auto filters \u0026ldquo;Prefer \u0026lsquo;fanart\u0026rsquo; with no title\u0026rdquo; \u0026ldquo;Preferred artwork size\u0026rdquo; Artwork larger than this will be sorted based on rating instead of size, and the minimum size of artwork automatically added is adjusted.\n\u0026ldquo;Minimum image rating\u0026rdquo; Slider to set minimum image rating to be added automatically.\n\u0026ldquo;Prefer \u0026lsquo;poster\u0026rsquo; with no title\u0026rdquo; Save \u0026lsquo;keyart\u0026rsquo; (aka textless poster) to \u0026lsquo;poster\u0026rsquo; if available.\nAction \u0026ldquo;Show latest artwork report\u0026rdquo; Contains details on the latest automatic and manual processing Artwork Beef performed.\nTV Shows / Movies / Music videos / Music Each media section is configurable separately, but the options are mostly the same. Music only works for Kodi 18 Leia.\n\u0026ldquo;Do not automatically add artwork from web services, only identify local files\u0026rdquo; If you manage all of you media info with an external media manager, then you probably want this. Manual artwork selection will still be able to pick artwork from web services, but only the file system will be checked during automatic processing.\n\u0026ldquo;Prefer artwork from specific web service\u0026rdquo; Artwork from the specified web service will sort first for automatic and manual processing. For artwork types that can have multiple images, automatic processing will only include images from this web service if any are available, to avoid picking duplicates from multiple sources automatically.\n\u0026ldquo;Automatically add these artwork types from web services and file system\u0026rdquo; A list of switches and number sliders for each art type for each individual media type to be automatically added to the media library from web services and the file system. Some skins can work with multiple artwork of the same type, like \u0026ldquo;fanart\u0026rdquo;, which is configured with a number slider. If you want other artwork types in the file system added to the Kodi library, include the artwork type in the box \u0026ldquo;Additional art types for \u0026hellip; (comma separated)\u0026quot;.\nArtwork Beef will not automatically apply these changes to existing items in the library, you will need to run \u0026ldquo;add missing artwork for \u0026hellip;\u0026rdquo; \u0026ldquo;all videos\u0026rdquo; or music to look for newly configured artwork.\n\u0026ldquo;Select series for episode \u0026lsquo;fanart\u0026rsquo;\u0026hellip;\u0026rdquo; Episode fanart must be enabled per series as they add a bundle of new API calls and just won\u0026rsquo;t be available for many series.\n\u0026ldquo;Download artwork to local files\u0026rdquo; \u0026ldquo;Artwork download configuration\u0026rdquo; By default artwork is only downloaded by Kodi\u0026rsquo;s image (texture) caching, like artwork added from scrapers. Switch this to all configured above to download everything configured in the section \u0026ldquo;Automatically add these artwork types from web services and file system\u0026rdquo;, or specific types below for a more detailed configuration of types to download.\nArtwork types downloaded by Artwork Beef will be downloaded to the local file system (generally next to the media items), rather than linked directly to the original URL. This uses the same filenames as Kodi\u0026rsquo;s library export. This makes it easy to share with other Kodi installations and saves some bandwidth for you and a bundle for the web services.\nFor artwork types that can have multiple images, only the base art name is needed; \u0026ldquo;fanart\u0026rdquo; will also download any \u0026ldquo;fanart1\u0026rdquo;, \u0026ldquo;fanart2\u0026rdquo;, \u0026ldquo;fanart3\u0026rdquo;, etc added to Kodi\u0026rsquo;s library.\nAdvanced \u0026ldquo;TV show scraper (if source unknown)\u0026rdquo; Kodi Jarvis (and early Krypton scrapers) didn\u0026rsquo;t identify uniqueid sources for TV shows, this setting will be used as a backup. \u0026lsquo;tvdb\u0026rsquo; for TheTVDB or \u0026lsquo;tmdb\u0026rsquo; for TheMovieDB.\n\u0026ldquo;Include detailed per item changes in the report\u0026rdquo; Include more details for each processed media item in the \u0026ldquo;artwork report\u0026rdquo; file.\n\u0026ldquo;Progress display for automatic processing\u0026rdquo; \u0026ldquo;full progress bar\u0026rdquo; displays a persistent progress bar like Kodi\u0026rsquo;s built in library updates can, and it includes a count of updated artwork at the end. \u0026ldquo;just warnings and errors\u0026rdquo; only shows notifications for warnings such as an error encountered accessing a web service or the add-on crashes. Finally there is \u0026ldquo;only add-on crashes\u0026rdquo;.\n\u0026ldquo;Show final artwork update count notification\u0026rdquo; Shows the final artwork update count in a notification. Overrides the count at the end of the \u0026ldquo;full progress bar\u0026rdquo;.\n\u0026ldquo;Automatically preload local video / music library artwork to Kodi texture cache\u0026rdquo; Artwork can be preloaded to the Kodi cache for faster browsing of new media. Video and music are configured separately. Only works for artwork saved locally: if you are going to download all artwork immediately for caching, then you might as well save it somewhere so you won\u0026rsquo;t have to download it again later. This requires the Kodi setting \u0026lsquo;Allow remote control via HTTP\u0026rsquo; enabled.\n\u0026ldquo;Clean existing artwork URLs (HTTP to HTTPS, web service URL changes)\u0026rdquo; Fixes up remote artwork URLs. Tracks a couple of web service URL changes since Artwork Beef was released, converts HTTP to HTTPS for supported web services, and ensures artwork URLs are properly URL encoded.\n\u0026ldquo;Manually select multiple images for all media types\u0026rdquo; Allows manual selection of multiple images for all artwork. Mostly for skin designers or developers to tinker with, it requires a skin or other interface or add-on to support multiple in some way.\n\u0026ldquo;Disable/Enable Artwork Beef debug context items (per skin)\u0026rdquo; Show the two debug context items \u0026ldquo;AB: Remove all artwork\u0026rdquo; and \u0026ldquo;AB: Log debug info\u0026rdquo; under the \u0026ldquo;Manage\u0026rdquo; menu of the context menu of most media items. Disabled by default.\nWeb services Enable Fanart.tv / The Movie DB / TheTVDB / The Audio DB / KyraDB Enable web services individually. These switches also hide service-specific configuration when disabled.\n\u0026ldquo;fanart.tv personal API key\u0026rdquo; Set the optional personal API for fanart.tv, which reduces the delay for new artwork results from fanart.tv. This is the API key that individual users of Artwork Beef (and other apps like it) should register for. Artwork Beef cannot tell you if this is entered incorrectly, so please double check it.\n\u0026ldquo;Add \u0026lsquo;keyart\u0026rsquo; from TheMovieDB\u0026rdquo; TheMovieDB defaults to \u0026ldquo;No Language\u0026rdquo; for all new images, so there will always be a number of posters with text that show up as \u0026ldquo;keyart\u0026rdquo;. Disabled by default.\nKyraDB API key / User key These keys are required if you want to use artwork from KyraDB. You can get these by signing up for a free account on the website.\nImage languages for automatic filter Controls which image languages will be accepted by Artwork Beef\u0026rsquo;s automatic process. By default Artwork Beef uses Kodi\u0026rsquo;s user interface language and if not found it falls back to English, but you can disable either of those options and set a \u0026ldquo;Priority language selection\u0026rdquo; that is preferred before either.\nFiles \u0026ldquo;Replace episode / movie / music video \u0026lsquo;thumb\u0026rsquo; with Kodi generated thumb\u0026rdquo; Episode \u0026lsquo;thumb\u0026rsquo; from web services are usually not great, and for movies it\u0026rsquo;s not \u0026ldquo;extrathumbs\u0026rdquo; but at least there is one. Separate config for each media type.\n\u0026ldquo;Process movie set artwork in a central directory\u0026rdquo; Save movie collection artwork to a central directory. Details on the Image files page.\n\u0026ldquo;central information directory\u0026rdquo; Directory the movie set artwork is stored in.\n\u0026ldquo;save new artwork to subdirectories per movie set\u0026rdquo; Enabled by default, separates movie set artwork into subdirectories named for the movie set. When disabled Artwork Beef saves all artwork in the central directory.\n\u0026ldquo;Grab movie set artwork from movie parent directory\u0026rdquo; Mutually exclusive with \u0026ldquo;movie set central directory\u0026rdquo;, but probably shouldn\u0026rsquo;t be.\n\u0026ldquo;Save movie / music video artwork with movie base file name\u0026rdquo; Save movie artwork to \u0026ldquo;[movie file name]-fanart.jpg\u0026rdquo; rather than \u0026ldquo;fanart.jpg\u0026rdquo;. Movies and music videos are configured separately.\n\u0026ldquo;Save additional movie and TV show fanart to \u0026lsquo;extrafanart\u0026rsquo; directory instead\u0026rdquo; By default Artwork Beef saves extra fanart as \u0026ldquo;fanart1.jpg\u0026rdquo;, \u0026ldquo;fanart2.jpg\u0026rdquo;, and so on next to the regular fanart. This instead saves them to the classic \u0026ldquo;extrafanart\u0026rdquo; directory.\n\u0026ldquo;Save additional music video fanart to \u0026lsquo;extrafanart\u0026rsquo; directory instead\u0026rdquo; \u0026ldquo;Identify alternative Artwork Downloader and MSAA artwork files\u0026rdquo; Like \u0026ldquo;logo.png\u0026rdquo; to \u0026ldquo;clearlogo\u0026rdquo;. This is generally safe to leave enabled, it\u0026rsquo;s an option in case you really do want the artwork saved to the Kodi library as \u0026ldquo;logo\u0026rdquo;, which is rare at this point.\n\u0026ldquo;In case of emergency\u0026rdquo; These are project API keys for the individual web services. You do not need them unless the built-in keys are disabled by the web services after being ripped off. These are unneeded otherwise.\n\u0026ldquo;Path exclusion\u0026rdquo; Prevent processing media items by path rules. Up to 10 rules can be defined.\n\u0026ldquo;Exclude the following type\u0026rdquo;  Folder: Exclude all media items in the specified folder. Path prefix: Exclude all media items with paths starting with the input text. Regex: Exclude all media items with paths matching the input regex.  Actions When run from \u0026ldquo;Program Add-ons\u0026rdquo;, Artwork Beef can perform a number of actions.\n \u0026ldquo;add missing artwork for \u0026hellip;\u0026quot;  new videos / music  New media in the respective library. This is the same process that is run automatically after a Kodi library update.   old videos / music  Old media items in the library, as defined above. This is the same process that is run automatically after a Kodi library update but always includes old items.   all videos / music  All media items in the library. Don\u0026rsquo;t run this very often, but it is here if you need it.     scan for new local files for video library  Looks for new local artwork only, avoids hitting web services like the standard processing. Always runs through all media items rather than just new and old.   \u0026ldquo;identify unmatched movie sets with TMDb \u0026hellip;\u0026quot;  Movie sets have to be matched by name rather than an exact ID like most other media types, so sometimes it needs a little help. This will display a list of all movie sets that have not yet been matched, and select one to enter a new name to search for.   \u0026ldquo;identify unmatched music videos with TheAudioDB \u0026hellip;\u0026quot;  Just like movie sets, but match on \u0026ldquo;Artist Name - Song title\u0026rdquo;.   \u0026ldquo;Remove artwork for media type \u0026hellip;\u0026quot;  Remove a specific type of art for one specific type of media in the library. Doesn\u0026rsquo;t touch local files. Can also remove all artwork types that don\u0026rsquo;t match the add-on configuration.   \u0026ldquo;Download existing remote images in the video library\u0026rdquo;  Downloads existing images in the video library that aren\u0026rsquo;t already saved locally. Only works for the video library.   \u0026ldquo;Preload local video / music library artwork to texture cache\u0026rdquo;  Preload local artwork to Kodi\u0026rsquo;s device-local texture cache. Browsing the media library is faster with artwork cached. Only works for local artwork. If you are going to download all artwork immediately for caching, then you might as well save it somewhere so you won\u0026rsquo;t have to download it again later. Run \u0026ldquo;Download existing remote images in the video library\u0026rdquo; to set that up.   \u0026ldquo;Save configured art types to advancesettings.xml whitelist\u0026rdquo;  Kodi 18 can add extended artwork from local files itself with some settings in advancedsettings.xml. This action copies the Artwork Beef configuration to Kodi\u0026rsquo;s AS.xml. This whitelist also applies to artwork added from scrapers, NFO files, and single file library exports. Running this action will back up the current advancedsettings.xml to \u0026ldquo;advancedsettings.xml.beef.bak\u0026rdquo;, and a new action \u0026ldquo;Restore original advancesettings.xml backed up by Artwork Beef\u0026rdquo; will be added to this list to restore the original.    "
},
{
	"uri": "https://rmrector.github.io/script.artwork.beef/usage/commands/",
	"title": "Advanced control",
	"tags": [],
	"description": "",
	"content": "Extra debug context items that work on individual media items can be enabled in the add-on settings. \u0026ldquo;AB: Remove all artwork\u0026rdquo; will remove all artwork from the single selected item. \u0026ldquo;AB: Log debug info\u0026rdquo; will run through the automatic process like \u0026ldquo;AB: Add missing artwork\u0026rdquo; and logs the result to the standard Kodi log, but it doesn\u0026rsquo;t change anything (helpful for troubleshooting).\nCommands Scripts, skins, and other add-ons can use commands to control bits and pieces of Artwork Beef.\nRun automatic processing on the library You can disable the automatic processing after library updates and schedule them with something like the Kodi Callbacks add-on or trigger them in some other way.\n Process new items  NotifyAll(script.artwork.beef:control, ProcessNewVideos) NotifyAll(script.artwork.beef:control, ProcessNewMusic)   Process new and old items, but not all in between  NotifyAll(script.artwork.beef:control, ProcessNewAndOldVideos) NotifyAll(script.artwork.beef:control, ProcessNewAndOldMusic)   Update local artwork only for all items in the video library  NotifyAll(script.artwork.beef:control, ProcessLocalVideos)    Run Artwork Beef on individual media items Like the context menu items generally under \u0026ldquo;Manage \u0026hellip;\u0026quot;, skins can add them somewhere else.\n RunScript(script.artwork.beef, mode=gui, mediatype=tvshow, dbid=$INFO[ListItem.DBID])  mode can also be \u0026ldquo;auto\u0026rdquo;, and mediatype can be \u0026ldquo;tvshow\u0026rdquo;, \u0026ldquo;movie\u0026rdquo;, \u0026ldquo;episode\u0026rdquo;, \u0026ldquo;set\u0026rdquo;, \u0026ldquo;musicvideo\u0026rdquo;, \u0026ldquo;artist\u0026rdquo;, \u0026ldquo;album\u0026rdquo;, and \u0026ldquo;song\u0026rdquo;.\nmode=gui isn\u0026rsquo;t a complete replacement for Kodi\u0026rsquo;s built in \u0026ldquo;Choose art\u0026rdquo; dialog: users can\u0026rsquo;t unset artwork from this dialog, nor can they manually navigate to and select other images in the file system.\nWatch for notifications Artwork Beef will send out a notification when the library processing is finished.\n The sender is script.artwork.beef and the message is Other.OnVideoProcessingFinished or Other.OnMusicProcessingFinished.  "
},
{
	"uri": "https://rmrector.github.io/script.artwork.beef/skins/whyreplaceextra/",
	"title": "Why replace extrafanart/extrathumbs",
	"tags": [],
	"description": "",
	"content": "I think that multiple fanart for individual media items should be integrated into the library like all other artwork. Here is a list of my reasons.\n Media file organization and skin display should be completely independent. Skins and other interfaces should access all library artwork in the same way.  or a list of particulars:\n Kodi\u0026rsquo;s support for freely named artwork in the library is pretty great, so let\u0026rsquo;s use it! It works for items in the library that may not point to a location on a file system that should even care about artwork on this/any level, maybe a movie from UPNP or VOD plugin. Plugins can fill their own ListItems with this artwork, which skins can access in exactly the same way. Should generally work for other library items that can have freely named artwork; movie sets, music videos, TV show seasons, episodes; even music artists, albums, and songs. Placing artwork in the library allows skins to work with multiple fanart without demanding one specific location for the files. Users can decide to keep them with their media files or in a secondary location, separated from the media for non-Kodi access. It can also be stored and accessed as URLs to web services or private information servers like Plex and Emby, just like all other artwork. Avoid file system delays or access issues (unavailable network file system, removable media, disk spinup) once the images have been cached. Classic extrafanart always hits the file system at least once for each movie/TV show when first listing the path to get a list of the images, even if they are all cached. Skins can more easily work with all fanart together (main + extra fanart)  Display them in a multiimage control with a skin structure described in Fun without add-ons. There are also plugin:// paths to accomplish this. See Artwork Helper.   Skins can look up each fanart image directly, which makes it simpler to display more than one at a time in arbitrary locations.  Probably overkill for fanart, but other art types could be multiplied for great effect. I\u0026rsquo;ve been playing with characterart.    "
},
{
	"uri": "https://rmrector.github.io/script.artwork.beef/",
	"title": "Artwork Beef",
	"tags": [],
	"description": "",
	"content": "Artwork Beef An add-on for Kodi Artwork Beef automatically adds extra artwork for media in your media libraries. It is generally intended to handle extended artwork just as Kodi and scrapers already do for basic artwork. It grabs artwork from the file system and wonderful web services fanart.tv, TheTVDB.com, The Movie Database, TheAudioDB.com, and KyraDB.\nIt is developed for Kodi 17 Krypton, and should also work for 16 Jarvis and 18 Leia. 15 Isengard may still work, but it\u0026rsquo;s really time to update. 19 Matrix is not supported.\nSupport and feedback thread on the Kodi forums.\nSource hosted on GitHub.\nIt fully supports series and season artwork from TheTVDB.com; movie, movie set, music video, series, and season artwork from fanart.tv; movie and movie set artwork from The Movie Database; music video artwork from TheAudioDB, and some movie artwork from KyraDB. For those series that really pop, high-quality fanart for each episode can be added from The Movie Database. The music library is supported in Kodi 18 Leia for artists, albums, and songs, with artwork from TheAudioDB and fanart.tv.\nThe full list of artwork types grabbed from external web services:\n   media type art types     movies poster, keyart, fanart, banner, clearlogo, landscape, clearart, discart, characterart, animatedposter, animatedfanart, animatedkeyart   movie sets poster, keyart, fanart, banner, clearlogo, landscape, clearart, discart   music videos poster (album/single cover), discart, fanart, artistthumb, banner, clearlogo, clearart, landscape   series poster, keyart, fanart, banner, clearlogo, landscape, clearart, characterart   seasons poster, fanart, banner, landscape   episodes fanart   artists thumb, fanart, banner, clearlogo, clearart, landscape   albums thumb (album cover), discart, back, spine   songs thumb (single cover)    Local artwork stored in the file system is preferred if it exists, and Artwork Beef can be configured to download other artwork that is added.\nVersion changelog\n"
},
{
	"uri": "https://rmrector.github.io/script.artwork.beef/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://rmrector.github.io/script.artwork.beef/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]